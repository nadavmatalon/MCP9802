/*==============================================================================================================*

    @file     MCP9802.cpp
    @author   Nadav Matalon
    @license  GNU General Public License
 
    Driver for MCP9802 (12-BIT I2C TEMPERATURE SENSOR)
 
    Rev 1.0 - First release (23.9.16)
 
 *==============================================================================================================*
    LICENSE
 *==============================================================================================================*
 
    This library is a free software; you can redistribute it and/or modify it under the terms of the
    GNU General Public License as published by the Free Software Foundation; either version 3.0 of the
    License, or any later version. This program is distributed in the hope that it will be useful, but
    WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
    PURPOSE. See the GNU General Public License for more details.

 *==============================================================================================================*/

#include "MCP9802.h"

/*==============================================================================================================*
    CONSTRUCTOR
 *==============================================================================================================*/

MCP9802::MCP9802(int devAddr) {
    _devAddr = devAddr;
}

/*==============================================================================================================*
    DESTRUCTOR
 *==============================================================================================================*/

MCP9802::~MCP9802() {}

/*==============================================================================================================*
    INITIATE I2C COMMUNICATION
 *==============================================================================================================*/

void MCP9802::initCall(byte dataByte) {
    Wire.beginTransmission(_devAddr);
    Wire.write(dataByte);
}

/*==============================================================================================================*
    END I2C COMMUNICATION
 *==============================================================================================================*/

void MCP9802::endCall() {
    _comBuffer = Wire.endTransmission();
}
/*==============================================================================================================*
    GET COMMUNICATION RESULT
 *==============================================================================================================*/

byte MCP9802::getComResult() {
    return _comBuffer;
}
/*==============================================================================================================*
    PING
 *==============================================================================================================*/

byte MCP9802::ping() {
    Wire.beginTransmission(_devAddr);
    return Wire.endTransmission();
}

/*==============================================================================================================*
    GET AMBIENT TEMPERATURE - CELSIUS (°C x 16)
 *==============================================================================================================*/

int MCP9802::getTempC16() {
    return getData(TEMP);
}

/*==============================================================================================================*
    GET AMBIENT TEMPERATURE - CELSIUS (°C)
 *==============================================================================================================*/

float MCP9802::getTempC() {
    return (getTempC16() / 16.0);
}

/*==============================================================================================================*
    GET AMBIENT TEMPERATURE - FAHRENHEIT (°F x 16)
 *==============================================================================================================*/

int MCP9802::getTempF16() {
    return DegreeConverter::conC16toF16(getTempC16());
}

/*==============================================================================================================*
    GET AMBIENT TEMPERATURE - FAHRENHEIT (°F)
 *==============================================================================================================*/

float MCP9802::getTempF() {
    return (getTempF16() / 16.0);
}

/*==============================================================================================================*
    GET HYSTERESIS - CELSIUS (°C x 16)
 *==============================================================================================================*/

int MCP9802::getHystC16() {
    return getData(HYST);
}

/*==============================================================================================================*
    GET HYSTERESIS - CELSIUS (°C)
 *==============================================================================================================*/

float MCP9802::getHystC() {
    return (getHystC16() / 16.0);
}

/*==============================================================================================================*
    GET HYSTERESIS - FAHRENHEIT (°F x 16)
 *==============================================================================================================*/

int MCP9802::getHystF16() {
    return DegreeConverter::conC16toF16(getHystC16());
}

/*==============================================================================================================*
    GET HYSTERESIS - FAHRENHEIT (°F)
 *==============================================================================================================*/

float MCP9802::getHystF() {
    return DegreeConverter::conCtoF(getHystC());
}

/*==============================================================================================================*
    GET TEMPERATURE LIMIT - CELSIUS (°C x 16)
 *==============================================================================================================*/

int MCP9802::getLimitC16() {
    return getData(LIMIT);
}

/*==============================================================================================================*
    GET TEMPERATURE LIMIT - CELSIUS (°C)
 *==============================================================================================================*/

float MCP9802::getLimitC() {
    return (getLimitC16() / 16.0);
}

/*==============================================================================================================*
    GET TEMPERATURE LIMIT - FAHRENHEIT (°F x 16)
*==============================================================================================================*/

int MCP9802::getLimitF16() {
    return DegreeConverter::conC16toF16(getLimitC16());
}

/*==============================================================================================================*
    GET TEMPERATURE LIMIT - FAHRENHEIT (°F)
 *==============================================================================================================*/

float MCP9802::getLimitF() {
    return DegreeConverter::conCtoF(getLimitC());
}

/*==============================================================================================================*
    GET REGISTER DATA
 *==============================================================================================================*/

int MCP9802::getData(reg_ptr_t ptr) {                                    // PARAMS: TEMP / HYST / LIMIT
    int data;
    initCall(ptr);
    endCall();
    if (_comBuffer == COM_SUCCESS) {
        Wire.requestFrom(_devAddr, DATA_BYTES);
        if (Wire.available() == DATA_BYTES) data = (Wire.read() << 8) | (Wire.read());
    }
    return (data >> 4);
}

/*==============================================================================================================*
    GET DEVICE CONFIGURATION REGISTER
 *==============================================================================================================*/

byte MCP9802::getConfig() {
    byte config;
    initCall(CONFIG);
    endCall();                              // check if needed
    if (_comBuffer == COM_SUCCESS) {
        Wire.requestFrom(_devAddr, CONFIG_BYTE);
        if (Wire.available() == CONFIG_BYTE) config = Wire.read();
    }
    return config;
}

/*==============================================================================================================*
    GET ALERT OUTPUT TYPE (0 = COMPARATOR / 1 = INTERRUPT)
 *==============================================================================================================*/

byte MCP9802::getAlertType() {
    return bitRead(getConfig(), 1);
}

/*==============================================================================================================*
    GET ALERT OUTPUT MODE (0 = ACTIVE-LOW / 1 = ACTIVE-HIGH)
 *==============================================================================================================*/

byte MCP9802::getAlertMode() {
    return bitRead(getConfig(), 2);
}

/*==============================================================================================================*
    GET FAULT-QUEUE SETTINGS (1 / 2 / 4 / 6 FAULT/S)
 *==============================================================================================================*/

byte MCP9802::getFaultQueue() {
    byte fqVal = ((getConfig() & 0x18) >> 2);
    if (!fqVal) fqVal = 1;
    return fqVal;
}

/*==============================================================================================================*
    GET RESOLUTION SETTINGS (9 / 10 / 11 / 12-BIT)
 *==============================================================================================================*/

byte MCP9802::getResolution() {
    return ((getConfig() & 0x60) >> 5) + 9;
}

/*==============================================================================================================*
    GET CONVERSION MODE (0 = CONTINUOUS / 1 = SINGLE-SHOT)
 *==============================================================================================================*/

byte MCP9802::getConMode() {
    return bitRead(getConfig(), 0);
}

/*==============================================================================================================*
    SET DEVICE CONFIGURATION REGISTER
 *==============================================================================================================*/

void MCP9802::setConfig(byte newConfig) {
    initCall(CONFIG_BYTE);
    Wire.write(newConfig);
    endCall();
}

/*==============================================================================================================*
    SET ALERT OUTPUT TYPE (0 = COMPARATOR / 1 = INTERRUPT)
 *==============================================================================================================*/

void MCP9802::setAlertType(alert_type_t alertType) {                    // PARAMS: COMP / INT
    byte newConfig = getConfig();
    alertType ? bitSet(newConfig, 1) : bitClear(newConfig, 1);
    setConfig(newConfig);
}

/*==============================================================================================================*
    SET ALERT OUTPUT MODE (0 = ACTIVE-LOW / 1 = ACTIVE-HIGH)
 *==============================================================================================================*/

void MCP9802::setAlertMode(alert_mode_t alertMode) {                    // PARAMS: ACTIVE-LOW / ACTIVE-HIGH
    byte newConfig = getConfig();
    alertMode ? bitSet(newConfig, 2) : bitClear(newConfig, 2);
    setConfig(newConfig);
}

/*==============================================================================================================*
    SET FAULT-QUEUE SETTINGS (1 / 2 / 4 / 6 FAULT/S)
 *==============================================================================================================*/

void MCP9802::setFaultQueue(fault_queue_t fqVal) {                      // PARAMS: FQ1 / FQ2 / FQ4 / FQ6
    byte newConfig = getConfig();
    for (byte j=4; j>2; j--) bitClear(newConfig, j);
    newConfig |= (byte)fqVal;
    setConfig(newConfig);
}

/*==============================================================================================================*
    SET RESOLUTION SETTINGS (9 / 10 / 11 / 12-BIT)
 *==============================================================================================================*/

void MCP9802::setResolution(resolution_t resVal) {                 // PARAMS: RES_9 / RES_10 / RES_11 // RES_12
    byte newConfig = getConfig();
    for (byte j=6; j>4; j--) bitClear(newConfig, j);
    newConfig |= (byte)resVal;
    setConfig(newConfig);
}

/*==============================================================================================================*
    SET CONVERSION MODE (CONTINUOUS / SINGLE-SHOT)
 *==============================================================================================================*/

void MCP9802::setConMode(con_mode_t conMode) {                    // PARAMS: CONT / SINGLE
    byte newConfig = getConfig();
    bitClear(newConfig, 7);
    conMode ? bitSet(newConfig, 0) : bitClear(newConfig, 0);
    _singleConfig = conMode ? newConfig : 0;
    setConfig(newConfig);
}

/*==============================================================================================================*
    SET HYSTERESIS (I) - CELSIUS (°C)
 *==============================================================================================================*/

void MCP9802::setHystC(int newHystC) {
    if (newHystC >= -55 && newHystC <= 125) setData(HYST, newHystC << 8);
}

/*==============================================================================================================*
    SET HYSTERESIS (II) - CELSIUS (°C)
 *==============================================================================================================*/

void MCP9802::setHystC(float newHystC) {
    if (newHystC >= -55 && newHystC <= 125) setData(HYST, (int)((DegreeConverter::roundC(newHystC)) * 256));
}

/*==============================================================================================================*
    SET HYSTERESIS (III) - CELSIUS (°C)
 *==============================================================================================================*/

void MCP9802::setHystC(double newHystC) {
    if (newHystC >= -55 && newHystC <= 125) setData(HYST, (int)((DegreeConverter::roundC(newHystC)) * 256));
}

/*==============================================================================================================*
    SET HYSTERESIS (IV) - CELSIUS (°C x 16)
 *==============================================================================================================*/

void MCP9802::setHystC16(int newHystC16) {
    if (newHystC16 >= -880 && newHystC16 <= 2000) setHystC((float)(newHystC16 / 16.0));
}

/*==============================================================================================================*
    SET HYSTERESIS (I) - FAHRENHEIT (°F)
 *==============================================================================================================*/

void MCP9802::setHystF(int newHystF) {
    if (newHystF >= -67 && newHystF <= 257) {
        setHystC((int)DegreeConverter::roundC(DegreeConverter::conFtoC(newHystF)));
    }
}

/*==============================================================================================================*
    SET HYSTERESIS (II) - FAHRENHEIT (°F)
 *==============================================================================================================*/

void MCP9802::setHystF(float newHystF) {
    if (newHystF >= -67 && newHystF <= 257) {
        setHystC((int)DegreeConverter::roundC(DegreeConverter::conFtoC(newHystF)));
    }
}

/*==============================================================================================================*
    SET HYSTERESIS (III) - FAHRENHEIT (°F)
 *==============================================================================================================*/

void MCP9802::setHystF(double newHystF) {
    if (newHystF >= -67 && newHystF <= 257) {
        setHystC((int)DegreeConverter::roundC(DegreeConverter::conFtoC(newHystF)));
    }
}

/*==============================================================================================================*
    SET HYSTERESIS (IV) - FAHRENHEIT (°F x 16)
 *==============================================================================================================*/

void MCP9802::setHystF16(int newHystF16) {
    if (newHystF16 >= -969 && newHystF16 <= 4112) {
        setHystC((float)(DegreeConverter::conF16toC16(newHystF16) / 16.0));
    }
}

/*==============================================================================================================*
    SET LIMIT (I) - CELSIUS (°C)
 *==============================================================================================================*/

void MCP9802::setLimitC(int newLimitC) {
    if (newLimitC >= -55 && newLimitC <= 125) setData(LIMIT, newLimitC << 8);
}

/*==============================================================================================================*
    SET LIMIT (II) - CELSIUS (°C)
 *==============================================================================================================*/

void MCP9802::setLimitC(float newLimitC) {
    if (newLimitC >= -55 && newLimitC <= 125) setData(LIMIT, (int)((DegreeConverter::roundC(newLimitC)) * 256));
}

/*==============================================================================================================*
    SET LIMIT (III) - CELSIUS (°C)
 *==============================================================================================================*/

void MCP9802::setLimitC(double newLimitC) {
    if (newLimitC >= -55 && newLimitC <= 125) setData(LIMIT, (int)((DegreeConverter::roundC(newLimitC)) * 256));
}

/*==============================================================================================================*
    SET LIMIT (IV) - CELSIUS (°C x 16)
 *==============================================================================================================*/

void MCP9802::setLimitC16(int newLimitC16) {
    if (newLimitC16 >= -880 && newLimitC16 <= 2000) setLimitC((float)(newLimitC16 / 16.0));
}

/*==============================================================================================================*
    SET LIMIT (I) - FAHRENHEIT (°F)
 *==============================================================================================================*/

void MCP9802::setLimitF(int newLimitF) {
    if (newLimitF >= -67 && newLimitF <= 257) {
        setLimitC((int)DegreeConverter::roundC(DegreeConverter::conFtoC(newLimitF)));
    }
}

/*==============================================================================================================*
    SET LIMIT (II) - FAHRENHEIT (°F)
 *==============================================================================================================*/

void MCP9802::setLimitF(float newLimitF) {
    if (newLimitF >= -67 && newLimitF <= 257) {
        setLimitC((int)DegreeConverter::roundC(DegreeConverter::conFtoC(newLimitF)));
    }
}

/*==============================================================================================================*
    SET LIMIT (III) - FAHRENHEIT (°F)
 *==============================================================================================================*/

void MCP9802::setLimitF(double newLimitF) {
    if (newLimitF >= -67 && newLimitF <= 257) {
        setLimitC((int)DegreeConverter::roundC(DegreeConverter::conFtoC(newLimitF)));
    }
}

/*==============================================================================================================*
    SET LIMIT (IV) - FAHRENHEIT (°F)
 *==============================================================================================================*/

void MCP9802::setLimitF16(int newLimitF16) {
    if (newLimitF16 >= -969.5 && newLimitF16 <= 4112) {
        setLimitC((float)(DegreeConverter::conF16toC16(newLimitF16) / 16.0));
    }
}

/*==============================================================================================================*
    SET REGISTER DATA
 *==============================================================================================================*/

void MCP9802::setData(reg_ptr_t ptr, int newData) {                                    // PARAMS: HYST / LIMIT
    if (ptr == HYST || ptr == LIMIT) {
        union Data_t { int i; byte b[2]; } data;
        data.i = newData;
        initCall(ptr);
        for (byte j=2; j>0; j--) Wire.write(data.b[j-1]);
        endCall();
    }
}

/*==============================================================================================================*
    RESET
 *==============================================================================================================*/

void MCP9802::reset() {
    setConMode(SINGLE);
    setConfig(DEFAULT_CONFIG);
    _singleConfig = 0;
    setLimitC(DEFAULT_LIMIT_C);
    setHystC(DEFAULT_HYST_C);
}

/*==============================================================================================================*
    SINGLE CONVERSION - CELSIUS ('SINGLE-SHOT' MODE ONLY) (°C x 16)
 *==============================================================================================================*/
//  Conversion Time: 9-BIT = 40ms / 10-BIT = 70ms / 11-BIT = 130ms / 12-BIT = 250ms

int MCP9802::singleConC16() {
    if (_singleConfig) {
        unsigned int conTime = MIN_CON_TIME * (1 << ((_singleConfig & 0x60) >> 5)) + 10;
        setConfig(_singleConfig | INIT_SINGLE_SHOT);
        delay(conTime);
        return getTempC16();
    } else {
        return 0;
    }
}

/*==============================================================================================================*
    SINGLE CONVERSION - CELSIUS ('SINGLE-SHOT' MODE ONLY) (°C)
 *==============================================================================================================*/

float MCP9802::singleConC() {
    return (singleConC16() / 16.0);
}

/*==============================================================================================================*
    SINGLE CONVERSION - FAHRENHEIT ('SINGLE-SHOT' MODE ONLY) (°F x 16)
 *==============================================================================================================*/

int MCP9802::singleConF16() {
    return _singleConfig ? DegreeConverter::conC16toF16(singleConC16()) : 0;
}

/*==============================================================================================================*
    SINGLE CONVERSION - FAHRENHEIT ('SINGLE-SHOT' MODE ONLY) (°F)
 *==============================================================================================================*/

float MCP9802::singleConF() {
    return (singleConF16() / 16.0);
}
